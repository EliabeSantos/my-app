import axios from "axios";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useRef } from "react";
import { useEffect, useState } from "react";
import { GetBroad } from "../services/getBroadId";
import { Videos } from "../services/getVideos";
import {
  ContentContainer,
  DownloadButton,
  ExcludeButton,
  InputContainer,
  InputList,
  List,
  MainContainer,
  VideosContainer,
} from "../styles/mainStyle";

interface FormatedVideos {
  streamerName: string;
  selectedClips: Array<any>;
}

const Home: NextPage = () => {
  const [token, setToken] = useState<string>("");
  const [test, setTest] = useState<any>([]);
  const ref = useRef<any>(null);
  const [streamersNames, setStreamersNames] = useState<Array<string>>([]);
  const [broadId, setBroadId] = useState<Array<string>>([]);
  const [downloads, setDownloads] = useState<Array<string>>([]);
  const [NumberVideos, setNumberVideos] = useState<number>(1);
  const [formatedVideosList, setFormatedVideosList] = useState<
    FormatedVideos[]
  >([]);
  const ChangeNumberVideos = (e: any) => {
    setNumberVideos(Number(e.target.value));
  };

  const getTwitchData = async () => {
    const data = await axios.post(
      "https://id.twitch.tv/oauth2/token",
      {
        client_id: process.env.NEXT_PUBLIC_CLIENTID,
        client_secret: process.env.NEXT_PUBLIC_CLIENTSECRET,
        grant_type: "client_credentials",
      },
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
    setToken(data.data.access_token);
  };
  useEffect(() => {
    getTwitchData();
  }, []);
  const [name, setName] = useState<string>("");
  const FindId = async () => {
    let controlBroad = [];
    for (let i = 0; i < streamersNames.length; i++) {
      const broad = await GetBroad({
        streamerName: streamersNames[i],
        token: token,
      });
      controlBroad.push(broad.data[0].id);
    }

    setBroadId(controlBroad);
  };

  const GetVideos = async () => {
    let FullControlVideos = [];
    for (let i = 0; i < broadId.length; i++) {
      let controlVideos = {
        streamerName: "",
        selectedClips: [],
      } as FormatedVideos;
      const videos = await Videos({
        broadId: broadId[i],
        token: token,
      });
      controlVideos.streamerName = streamersNames[i];

      for (let y = 0; y < NumberVideos; y++) {
        controlVideos.selectedClips.push(videos.data[y]);
      }
      FullControlVideos.push(controlVideos);
    }
    setFormatedVideosList(FullControlVideos);
    setTest(FullControlVideos);
  };

  useEffect(() => {
    if (broadId.length) GetVideos();
  }, [broadId]);

  const HandleAddStreamer = () => {
    setStreamersNames([...streamersNames, ...name.split(" ")]);
    setName("");
  };

  const RemoveName = (e: any) => {
    setStreamersNames(streamersNames.filter((x: string) => x != e.target.id));
    setFormatedVideosList(
      formatedVideosList.filter(
        (x) => x.streamerName.toLowerCase() != e.target.id.toLowerCase()
      )
    );
  };
  const RemoveVideoFromList = (
    currentStreamer: any,
    index: number,
    currentClip: any
  ) => {
    let control: any = formatedVideosList;
    control[index].selectedClips = control[index].selectedClips.filter(
      (clip: any) => clip.id != currentClip
    );
    if (control[index].selectedClips.length == 0) {
      setStreamersNames(
        streamersNames.filter(
          (x: string) => x != control[index].streamerName.toLowerCase()
        )
      );
      control[index] = {};
    }

    setFormatedVideosList([...control]);
    console.log(formatedVideosList);
  };

  return (
    <MainContainer>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <List>
        {React.Children.toArray(
          streamersNames.map((name) => (
            <p>
              {name}
              <button id={name} onClick={RemoveName}>
                X
              </button>
            </p>
          ))
        )}
      </List>
      <ContentContainer>
        <InputContainer>
          <InputList>
            <input
              value={name}
              onChange={(e: any) => setName(e.target.value)}
            />
            <input
              id="number"
              type="number"
              min={1}
              max={5}
              onChange={ChangeNumberVideos}
            />
            <button onClick={HandleAddStreamer}>+</button>
          </InputList>
          <button
            onClick={() => {
              setFormatedVideosList([]);
              FindId();
            }}
          >
            Buscar
          </button>
        </InputContainer>
        <VideosContainer>
          {React.Children.toArray(
            formatedVideosList?.map(
              (currentStreamer: FormatedVideos, index: number) => (
                <div>
                  <h1>{currentStreamer.streamerName}</h1>
                  <div>
                    {React.Children.toArray(
                      currentStreamer?.selectedClips?.map(
                        (currentClip: any) => {
                          const src = `${currentClip?.thumbnail_url.replace(
                            "-preview-480x272.jpg",
                            ""
                          )}.mp4`;
                          return (
                            <div>
                              <video controls src={src}></video>
                              <DownloadButton
                                clicked={
                                  downloads.find(
                                    (y: string) => y == currentClip.id
                                  )?.length
                                    ? true
                                    : false
                                }
                              >
                                <a
                                  onClick={() => {
                                    setDownloads([
                                      ...downloads,
                                      currentClip.id,
                                    ]);
                                  }}
                                  href={src}
                                  download
                                >
                                  Baixar
                                </a>
                              </DownloadButton>
                              <ExcludeButton
                                onClick={() => {
                                  RemoveVideoFromList(
                                    currentStreamer,
                                    index,
                                    currentClip.id
                                  );
                                }}
                              >
                                X
                              </ExcludeButton>
                            </div>
                          );
                        }
                      )
                    )}
                  </div>
                </div>
              )
            )
          )}
        </VideosContainer>
      </ContentContainer>
    </MainContainer>
  );
};

export default Home;
