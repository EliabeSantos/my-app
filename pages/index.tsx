import axios from "axios";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useRef } from "react";
import { useEffect, useState } from "react";
import { GetBroad } from "../services/getBroadId";
import { Videos } from "../services/getVideos";
import {
  ContentContainer,
  DownloadButton,
  InputContainer,
  InputList,
  List,
  MainContainer,
  VideosContainer,
} from "../styles/mainStyle";
const Home: NextPage = () => {
  const [token, setToken] = useState<string>("");
  const [test, setTest] = useState<any>([]);
  const ref = useRef<any>(null);
  const [streamersNames, setStreamersNames] = useState<Array<string>>([]);
  const [broadId, setBroadId] = useState<Array<string>>([]);
  const getTwitchData = async () => {
    console.log(process.env.REACT_APP_CLIENT_SECRET);
    const data = await axios.post(
      "https://id.twitch.tv/oauth2/token",
      {
        client_id: process.env.NEXT_PUBLIC_CLIENTID,
        client_secret: process.env.NEXT_PUBLIC_CLIENTSECRET,
        grant_type: "client_credentials",
      },
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
      }
    );
    setToken(data.data.access_token);
  };
  useEffect(() => {
    getTwitchData();
  }, []);
  const [name, setName] = useState<string>("");
  const FindId = async () => {
    let controlBroad = [];
    for (let i = 0; i < streamersNames.length; i++) {
      const broad = await GetBroad({
        streamerName: streamersNames[i],
        token: token,
      });
      controlBroad.push(broad.data[0].id);
    }

    setBroadId(controlBroad);
  };

  const GetVideos = async () => {
    let controlVideos = [];

    for (let i = 0; i < broadId.length; i++) {
      const videos = await Videos({
        broadId: broadId[i],
        token: token,
      });
      controlVideos.push(videos.data[0]);
    }

    setTest(controlVideos);
  };

  useEffect(() => {
    if (broadId.length) GetVideos();
  }, [broadId]);

  const HandleAddStreamer = () => {
    setStreamersNames([...streamersNames, ...name.split(" ")]);
    setName("");
  };

  const HandleTest = (e: any) => {
    const test = document.getElementById("myFrame-0") as any;
    if (ref.current.offsetParent) console.log(ref);
  };
  const RemoveName = (e: any) => {
    setStreamersNames(streamersNames.filter((x: string) => x != e.target.id));
    console.log(
      setTest(
        test.filter(
          (x: any) =>
            x?.broadcaster_name.toLowerCase() != e.target.id.toLowerCase()
        )
      )
    );
  };
  return (
    <MainContainer>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <List>
        {React.Children.toArray(
          streamersNames.map((name) => (
            <p>
              {name}
              <button id={name} onClick={RemoveName}>
                X
              </button>
            </p>
          ))
        )}
      </List>
      <ContentContainer>
        <InputContainer>
          <InputList>
            <input
              value={name}
              onChange={(e: any) => setName(e.target.value)}
            />
            <button onClick={HandleAddStreamer}>+</button>
          </InputList>
          <button onClick={() => FindId()}>Buscar</button>
        </InputContainer>
        <VideosContainer>
          {test
            ? test.map((x: any, index: number) => {
                if (x)
                  return (
                    <div key={index}>
                      <video
                        controls
                        src={`${x?.thumbnail_url.replace(
                          "-preview-480x272.jpg",
                          ""
                        )}.mp4`}
                      ></video>
                      <DownloadButton>Baixar</DownloadButton>
                    </div>
                  );
              })
            : null}
        </VideosContainer>
      </ContentContainer>
    </MainContainer>
  );
};

export default Home;
